Use case: Generate report
	Goal: The user recieves a report generated by the system using the information in the provided SQL database.
	Scope:
		- Collecting and inputting data to fill out the SQL database: OUT
		- Integrating the SQL database into the system: IN
		- Informing the user of commands they can give the system: IN
		- Taking in correct commands from the user: IN
		- Interpreting the data in the SQL database into a report: IN
		- Building and returning the desired report to the user: IN
		- Saving or storing the generated reports: OUT
	Design scope: System
	Primary actor: Oraganisation employee
	Goal level: User goal
	Preconditions: SQL database containing population information has already been provided by the organisation.
	Success end condition: The system returns the desired report to the user.
	Failed end condition: The system does not return the desired report to the user.
	Trigger: Pre-defined commands, made to fit all requirements, given to the system by the user in the command line.
	Main success scenario:
		- User opens the system and inputs the appropriate command for their desired report.
		- System recieves the input and begins collecting the correct data required to generate the correct report.
		- System correctly generates the desired report.
		- System returns the correct report to the user visbaly.
		- System is then ready to either recieve another command from the user or shut down.
	Extensions:
		- User provides incorrect command to the system:
			- System rejects command with an error message and requests a correct command.
			- User provides a correct command.
		- Report requested by user is not able to be generated by system due to missing data in the SQL database:
			- System informs user that the requested data does not exist and returns to accepting commands.


Use case: Return additional information
	Goal: The user recieves information provided by the system using the information in the provided SQL database.
	Scope:
		- Collecting and inputting data to fill out the SQL database: OUT
		- Integrating the SQL database into the system: IN
		- Informing the user of commands they can give the system : IN
		- Taking in correct commands from the user: IN
		- Interpreting the data in the SQL database into the desired information: IN
		- Returning the desired information to the user: IN
		- Saving or storing the desired information: OUT
	Design scope: System
	Primary actor: Organisation employee
	Goal level: User goal
	Preconditions: SQL database containing population information has already been provided by the organisation.
	Success end condition: The system returns the desired information to the user.
	Failed end condition: The system does not return the desired information to the user.
	Trigger: Pre-defined commands, made to fit all requirements, given to the system by the user in the command line.
	Main success scenario:
		- User opens the system and inputs the correct command for their desired information.
		- System recieves the input and begins generating correct output with the correct information from the SQL database.
		- System returns the correct information to the user visbaly.
		- System is the ready to either recieve another command from the user or shut down.
	Extensions:
		- User provides incorrect command to the system:
			- System rejects command with an error message and requests a correct command.
			- User provides a correct command.
		- Information requested by the user is not able to be returned due to missing data in the SQL database;
			- System informs the user that the requested data does not exist and returns to accepting commands.













